{
	"info": {
		"_postman_id": "604a1a84-89dd-4f0b-9e4a-9b9bfbef835e",
		"name": "myern-app-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[1] Auth & admin operations",
			"item": [
				{
					"name": "[1.1] Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var data = pm.response.json();",
									"pm.environment.set(\"admin-token\", data.accessToken)",
									"",
									"pm.test(\"Response has an accessToken property\", function () {",
									"    pm.expect(data.accessToken).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/login",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.2] Register user \"rick\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"User registered successfully\\\"\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User registered successfully\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"rick\",\n    \"email\": \"rick@evanpernu.com\",\n    \"password\": \"wubalubadub\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/register",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.3] Get user ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"id of the result is 1\", function () {",
									"    pm.expect(data.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"username of the result is admin\", function () {",
									"    pm.expect(data.username).to.eql(\"admin\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}admin/users/1",
							"host": [
								"{{url}}admin"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.4] Get all users, expect \"rick\" and \"admin\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"admin appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"admin\");",
									"});",
									"",
									"pm.test(\"rick appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"rick\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}admin/users/",
							"host": [
								"{{url}}admin"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.5] Register user \"admon\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"User registered successfully\\\"\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User registered successfully\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admon\",\n    \"email\": \"admon@evanpernu.com\",\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/register",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.6] Search for \"adm\", expect  \"admin\" and \"admon\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"admin appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"admin\");",
									"});",
									"",
									"pm.test(\"admon appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"admon\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}admin/users?criteria=adm",
							"host": [
								"{{url}}admin"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "criteria",
									"value": "adm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.7] Search for \"admi\", expect only \"admin\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"admin appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"admin\");",
									"});",
									"",
									"pm.test(\"admon appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"admon\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/admin/users?criteria=admi",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "criteria",
									"value": "admi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.8] Create 100 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// NOTE: This test will only work in a collection runner, as it uses postman.setNextRequest",
									"let counter = parseInt(pm.environment.get(\"counter\"))",
									"",
									"if(counter < 100){",
									"    counter++;",
									"    pm.environment.set(\"counter\", counter);",
									"    postman.setNextRequest(\"[1.8] Create 100 users\")",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"User registered successfully\\\"\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User registered successfully\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user{{counter}}\",\n    \"email\": \"user{{counter}}@evanpernu.com\",\n    \"password\": \"k\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/register",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.9] Get last page, expect user100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"user100 appears in the results\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"user100@\");",
									"});",
									"",
									"pm.test(\"user1 does not appear in the results\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"user1@\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Reset the counter from \"[1.8] Create 100 users\"",
									"pm.environment.set(\"counter\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}admin/users?page=10&size=10",
							"host": [
								"{{url}}admin"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "10"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.10]  Change my username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated successfully appears in response\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"User updated successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admiin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/update",
							"host": [
								"{{url}}user"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.11] Get user ID 1, expect name change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"id of the result is 1\", function () {",
									"    pm.expect(data.id).to.eql(1);",
									"});",
									"",
									"pm.test(\"username of the result is admin\", function () {",
									"    pm.expect(data.username).to.eql(\"admiin\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}admin/users/1",
							"host": [
								"{{url}}admin"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.12] register a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"User registered successfully\\\"\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User registered successfully\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"email\": \"a@evanpernu.com\",\n    \"password\": \"a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/register",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.13] login as a:a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has an accessToken property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"});",
									"",
									"var data = pm.response.json();",
									"pm.environment.set(\"admin-token\", data.accessToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"password\": \"a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.14] change a's password to b",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated successfully appears in response\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"User updated successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/update",
							"host": [
								"{{url}}user"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.15] login as a:b",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has an accessToken property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"});",
									"",
									"var data = pm.response.json();",
									"pm.environment.set(\"admin-token\", data.accessToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"password\": \"b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.16] change a's username to b",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated successfully appears in response\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"User updated successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/update",
							"host": [
								"{{url}}user"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.17] login as b:b",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has an accessToken property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"});",
									"",
									"var data = pm.response.json();",
									"pm.environment.set(\"admin-token\", data.accessToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"b\",\n    \"password\": \"b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[2] Card API",
			"item": [
				{
					"name": "[2.0] Login as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var data = pm.response.json();",
									"pm.environment.set(\"admin-token\", data.accessToken)",
									"",
									"pm.test(\"Response has an accessToken property\", function () {",
									"    pm.expect(data.accessToken).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/login",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.1] Create  \"card_1\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"Card was created successfully\\\"\", function () {",
									"    pm.expect(data.message).to.include(\"Card was created successfully\")",
									"});",
									"",
									"pm.test(\"Response contains a string id\", function () {",
									"    pm.expect(data.id).to.be.a('string');",
									"});",
									"",
									"pm.environment.set(\"id\", data.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"card_1\",\n    \"difficulty\": \"easy\",\n    \"content\": \"42\",\n    \"ispublic\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards",
							"host": [
								"{{url}}cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.2] Get \"card_1\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"id of the result is corrrect\", function () {",
									"    pm.expect(data.id).to.eql(pm.variables.get(\"id\"));",
									"});",
									"",
									"pm.test(\"title is \\\"card_1\\\"\", function () {",
									"    pm.expect(data.title).to.eql(\"card_1\");",
									"});",
									"",
									"pm.test(\"difficulty is \\\"easy\\\"\", function () {",
									"    pm.expect(data.difficulty).to.eql(\"easy\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards/{{id}}",
							"host": [
								"{{url}}cards"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.3] Update \"card_1\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"Response contains \\\"Card updated successfully\\\"\", function () {",
									"    pm.expect(data.message).to.include(\"Card updated successfully\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"difficulty\": \"hard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards/{{id}}/update",
							"host": [
								"{{url}}cards"
							],
							"path": [
								"{{id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.4] Get \"card_1\" reflects changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"difficulty is \\\"hard\\\"\", function () {",
									"    pm.expect(data.difficulty).to.eql(\"hard\")",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards/{{id}}",
							"host": [
								"{{url}}cards"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.5] Delete \"card_1\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"message is correct\", function () {",
									"    pm.expect(data.message).to.eql(\"Card \" + pm.environment.get(\"id\") + \" was deleted successfully\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards/{{id}}",
							"host": [
								"{{url}}cards"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.6] Get \"card_1\" empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response body is empty\", function () {",
									"    var res = (_.isEmpty(responseBody));",
									"    pm.expect(res).to.be.true",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards/{{id}}",
							"host": [
								"{{url}}cards"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.7] Create 100 cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// NOTE: This test will only work in a collection runner, as it uses postman.setNextRequest",
									"let counter = parseInt(pm.environment.get(\"counter2\"))",
									"",
									"if(counter < 100){",
									"    counter++;",
									"    pm.environment.set(\"counter\", counter);",
									"    postman.setNextRequest(\"[2.9] Create 100 cards\")",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"Card was created successfully\\\"\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Card was created successfully\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{admin-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"card_{{counter}}\",\n    \"difficulty\": \"easy\",\n    \"content\": \"card #{{counter}}\",\n    \"ispublic\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards",
							"host": [
								"{{url}}cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.8] Get all cards has 101 elements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"response contains 2 items\", function () {",
									"    pm.expect(data.totalItems).to.eql(100);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards",
							"host": [
								"{{url}}cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.5] Delete all cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"message is correct\", function () {",
									"    pm.expect(data.message).to.eql(\"All cards deleted successfully\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards",
							"host": [
								"{{url}}cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.8] Get all cards is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"response contains 0 items\", function () {",
									"    pm.expect(data.totalItems).to.eql(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards",
							"host": [
								"{{url}}cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.12] register non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains \\\"User registered successfully\\\"\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User registered successfully\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"non-admin\",\n    \"email\": \"non-admin@evanpernu.com\",\n    \"password\": \"a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth/register",
							"host": [
								"{{url}}auth"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[1.15] login as non-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a JSON body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has an accessToken property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.be.a('string');",
									"});",
									"",
									"var data = pm.response.json();",
									"pm.environment.set(\"admin-token\", data.accessToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"non-admin\",\n    \"password\": \"a\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2.5] Delete all cards fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"",
									"pm.test(\"message is correct\", function () {",
									"    pm.expect(data.message).to.eql(\"Card \" + pm.environment.get(\"id\") + \" was deleted successfully\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-access-token",
								"value": "{{admin-token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNjE0NTAyNzQ4LCJleHAiOjE2MTQ1Mzg5NDh9.v9H2zZcJVCpAALj4HDsEE-NeF-50KzAqQFN9Tw7OonI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}cards",
							"host": [
								"{{url}}cards"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}